type Usuario {
    id: ID
    nombre: String
    apellido: String
    password: String
    email: String
    descargas: Int
    favoritos: [Favorito]
    rol: RolUsuario
    comentarios : [Comentario]
}
type Libro {
    id: ID
    titulo: String
    autor: String
    genero: String
    coleccion: String
    cover: String
    epub: String
    pdf: String
    sinopsis: [Sinopsis]
}
type Comentario {
    fecha: String
    text: String
}
type Favorito {
    libro : String
    autor : String
}
type Sinopsis {
    parrafo: String
}

enum RolUsuario {
    ADMIN
    MODERADOR
    PARTICIPANTE
}

type Query {
    getUsuarios(limite: Int, offset: Int): [Usuario]
    getUsuario(id: ID): Usuario
    totalUsuarios: Int

    #Libros
    obtenerLibros(limite: Int, offset: Int): [Libro]
    obtenerLibro(id: ID!) : Libro
}


input FavoritosInput {
    libro: String
    autor: String
}

input ComentariosInput {
    fecha: String
    text: String
}

input UsuarioInput {
    id: ID
    nombre: String!
    apellido: String!
    password: String!
    email: String!
    descargas: Int
    favoritos: [FavoritosInput] 
    rol: RolUsuario
    comentarios: [ComentariosInput]
}

input SinopsisInput {
    parrafo: String
}

input LibroInput {
    id: ID
    titulo: String!
    autor: String!
    genero: String!
    coleccion: String
    cover: String!
    epub: String!
    pdf: String!
    sinopsis: [SinopsisInput]
}

type Mutation {
    #Nombre del resolver, Input con datos y el  valor que retorna
    """ Permite la creaci√≥n de nuevos usuarios en el sistema """
    crearUsuario(input: UsuarioInput) : Usuario

    """ Permite editar un usuario """
    actualizarUsuario(input: UsuarioInput) : Usuario
    eliminarUsuario(id: ID!) : String

    #Libros
    nuevoLibro(input: LibroInput) : Libro
    actualizarLibro(input: LibroInput) : Libro
    eliminarLibro(id: ID!) : String
}